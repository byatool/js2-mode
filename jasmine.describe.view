#name jasmineDescribeView
# key: jadv
# --

goog.require('goog.string');
goog.require('src.base.control.controlConstant');
goog.require('src.site.view.${1:controlName}');


goog.provide('src.test.view.$1.whenInitializing${1:$(transform-text text)}');

/**
 @export
 */
src.test.view.$1.whenInitializing${1:$(transform-text text)}.describe = function () {

    //Using

    var Constant_ = src.site.view.$1.constant;
    var Current_ = src.site.view.$1;
    var ControlConstant_ = src.base.control.controlConstant;    

    
    //Fields

    var ContainerId_ = goog.string.getRandomString();

    var createADiv_;
    var options_;
    var parentContainer_;
    
    
    //Test Hooks

    beforeEach(function() {
        parentContainer_ = {};

        createADiv_ = function(attributes){
         switch(attributes[ControlConstant_.Class]) {
         case Constant_.ContainerClass:
              return parentContainer_;
              break;               
         default:
           return parentContainer_;
           break;
      }};
    });
    
    
    //Support Methods
    var callTheMethod_ = function() {
        return Current_.initialize(ContainerId_, createADiv_);
    };
    
    
    //Test Methods

    it('should create a parent container.', function() {
        var methodWasCalled = false;
        
        createADiv_ = function(attributes) {
            methodWasCalled = methodWasCalled ||
            (Constant_.ContainerClass !== undefined &&
             attributes[ControlConstant_.Id] === ContainerId_&&
             attributes[ControlConstant_.Class] === Constant_.ContainerClass);

            return parentContainer_;
        };
        callTheMethod_();
        
        expect(methodWasCalled).toBe(true);
    });
    
    
    it('should return the parent container.', function() {
        expect(callTheMethod_()).toBe(parentContainer_);
    });    
};

describe('When refreshing ${1:$(transform-text text)}, it', function() {
    src.test.view.$1.whenInitializing${1:$(transform-text text)}.describe();
});


//--namespace="src.test.view.$1.whenInitializing${1:$(transform-text text)}" ^




goog.provide('src.site.view.$1.constant');


/**
 @const
 @type {string}
 @protected
 */
src.site.view.mainContent.constant.ContainerClass = '$1Container';


goog.require('src.base.control.controlConstant');
goog.require('src.base.helper.domCreation');
goog.require('src.site.view.$1.constant');


goog.provide('src.site.view.$1');

/**
 @param {string} containerId The id for the parent container.
 @param {?function} createADiv The method used  to create a 
 div element.
 @return {Object} The created control.
 @export
 */
src.site.view.$1.initialize = function(containerId, createADiv) {

  createADiv = createADiv ? 
             createADiv : 
             src.base.helper.domCreation.div;

  /* Start */

  var Constant_ = src.site.view.$1.constant;
  var ControlConstant_ = src.base.control.controlConstant;
  
  var containerAttributes = {};
  containerAttributes[ControlConstant_.Id] = containerId;
  containerAttributes[ControlConstant_.Class] = Constant_.ContainerClass;
  var container = createADiv(containerAttributes);
    
  return container;
};
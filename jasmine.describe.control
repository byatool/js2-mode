#name: describeControl
# key: descc
# --

goog.require('goog.string');
goog.require('src.base.control.controlConstant');
goog.require('src.base.control.${1:controlName}');

goog.provide('src.test.control.$1.whenInitializing${1:$(transform-text text)}');

/**
 @export
 */
src.test.control.$1.whenInitializing${1:$(transform-text text)}.describe = function () {

    //Using

    var Current_ = src.base.control.$1;
    var Constant_ = src.base.control.$1.constant;
var ControlConstant_ = src.base.control.controlConstant;
    
    //Fields

    var ParentContainerId_ = goog.string.getRandomString();
    var ParentContainerClass_ = goog.string.getRandomString();

    var createADiv_;
    var parentContainer_;
    
    
    //Test Hooks

    beforeEach(function() {
        parentContainer_ = {};
    });
    
    
    //Support Methods

    var callTheMethod_ = function() {
        return Current_.initialize(options_, createADiv_);
    };
    
    
    //Test Methods
    
    it('should create a parent container.', function() {
        var methodWasCalled = false;
        
    createADiv_ = function(attributes) {
      methodWasCalled = methodWasCalled ||
        (Constant_.ContainerId !== undefined &&
         Constant_.ContainerClass !== undefined &&
         attributes[ControlConstant_.Id] === Constant_.ContainerId &&
         attributes[ControlConstant_.Class] === Constant_.ContainerClass);

            return parentContainer_;
        };
        callTheMethod_();
        
        expect(methodWasCalled).toBe(true);
    });
    
    
    it('should return the parent container.', function() {
        expect(callTheMethod_()).toBe(parentContainer_);
    });
};


describe('When initializing an $1, it', function() {
    src.test.control.$1.whenInitializing${1:$(transform-text text)}.describe();
});



goog.provide('src.base.control.$1.constant');

/**
 @const
 @type {string}
 @export
 */
src.base.control.$1.constant.ContainerId = 'containerId';


/**
 @const
 @type {string}
 @export
 */
src.base.control.$1.constant.ContainerClass = 'containerClass';




goog.require('src.base.control.$1.constant');

goog.provide('src.base.control.$1');


/**
 @param {Array} options The needed options to build the form.
 @param {?function} createADiv The method used  to create a 
 div element.
 @return {Object} The created control.
 @export
 */
src.base.control.$1.initialize = function(options, createADiv) {
  createADiv = createADiv ? createADiv : src.base.helper.domCreation.div;

  var current = src.base.control.$1;
  var constant = src.base.control.$1.constant;

  var container = createADiv({
      'id': options[constant.ContainerId],
      'class': options[constant.ContainerClass]
      });
    
  return container;
};


//--namespace="src.test.control.$1.whenInitializing${1:$(transform-text text)}" ^

#name: JasmineDescribeControlAdvanced
# key: jadca
# --

goog.require('goog.string');
goog.require('src.base.control.controlConstant');
goog.require('src.base.control.${1:controlName}');
goog.require('src.base.control.$1.constant');

goog.provide('src.test.control.$1.whenInitializing${1:$(transform-text text)}');

/**
 @export
 */
src.test.control.$1.whenInitializing${1:$(transform-text text)}.describe = function () {

    //Using

    var Current_ = src.base.control.$1;
    var Constant_ = src.base.control.$1.constant;
var ControlConstant_ = src.base.control.controlConstant;
    
    //Fields

    var ParentContainerId_ = goog.string.getRandomString();
    var ParentContainerClass_ = goog.string.getRandomString();

    var createADiv_;
    var parentContainer_;
    
    
    //Test Hooks

    beforeEach(function() {
        parentContainer_ = {};
    });
    
    
    //Support Methods

    var callTheMethod_ = function() {
        return Current_.initialize(ParentContainerId_, createADiv_);
    };
    
    
    //Test Methods
    
    it('should create a parent container.', function() {
        var methodWasCalled = false;
        
    createADiv_ = function(attributes) {
      methodWasCalled = methodWasCalled ||
        (attributes[ControlConstant_.Id] === ParentContainerId_ &&
         attributes[ControlConstant_.Class] === ParentContainerId_);

            return parentContainer_;
        };
        callTheMethod_();
        
        expect(methodWasCalled).toBe(true);
    });
    
    
    it('should return the parent container.', function() {
        expect(callTheMethod_()).toBe(parentContainer_);
    });
};


describe('When initializing an $1, it', function() {
    src.test.control.$1.whenInitializing${1:$(transform-text text)}.describe();
});




goog.provide('src.base.control.$1.constant');





goog.require('src.base.control.controlConstant');
goog.require('src.base.control.$1.constant');
goog.require('src.base.helper.domCreation');


goog.provide('src.base.control.$1');


/**
 @param {string} containerId The id for the overall container.
 @param {?function} createADiv The method used  to create a 
 div element.
 @return {Object} The created control.
 @export
 */
src.base.control.$1.initialize = 
  function(containerId, createADiv) {
    createADiv = createADiv ? 
    createADiv : 
    src.base.helper.domCreation.div;
  
    /* START */
  
    var Constant_ = src.base.control.$1.Constant_;
    var ControlConstant_ = src.base.control.controlConstant;
    var Current_  = src.base.control.$1;
  
  
    var containerAttributes = {};
    containerAttributes[ControlConstant_.Id] = containerId;
    containerAttributes[ControlConstant_.Class] = containerId;
    var container = createADiv(containerAttributes);
  
      
    return container;
  };


//--namespace="src.test.control.$1.whenInitializing${1:$(transform-text text)}" ^
